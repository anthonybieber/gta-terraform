name: QA Workflow

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  # Get a list of changed stacks and create job output 'changed_stack_array'
  # Example of changed files in commit (input): Makefile, stacks/sqs/env/prod.yml, stacks/sqs/stack.tf, stacks/ec2/stack.tf
  # Example output: '["ec2", "sqs"]'
  get-changed-stacks:
    runs-on: ubuntu-latest
    outputs:
      changed_stack_array: ${{ steps.updated_stacks.outputs.arr }}
    steps:
      - uses: actions/checkout@v2.1.0
      - id: files
        uses: jitterbit/get-changed-files@v1
      - name: Parse changed stack files to stack names
        id: updated_stacks
        run : |
          arr=()
          for changed_file in ${{ steps.files.outputs.all }}; do
            if [[ $changed_file == *"stack"* ]]; then
              parsed=$(echo "$changed_file" | awk -F[//] '{print $2}' )
              arr+=("$parsed")
            fi
          done
          unique_array=($(echo "${arr[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
          output_array=$(printf '%s\n' "${unique_array[@]}" | jq -R . | jq -s .)
          echo ::set-output name=arr::$output_array
      - name: echo outputs
        run: echo ${{ steps.updated_stacks.outputs.arr }}
  # Run terraform plan on pull-request into develop for every changed stack
  plan-stack:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: get-changed-stacks
    strategy:
      matrix:
        stack_name: ${{ fromJson(needs.get-changed-stacks.outputs.changed_stack_array) }}
        env: [qa, prod]
      max-parallel: 0
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v2.1.0
      - uses: hashicorp/setup-terraform@v1
      - name: Init stack
        run: make init_stack STACK=${{ matrix.stack_name }}
      - name: Plan stack
        run: make plan ENV=${{ matrix.env }} STACK=${{ matrix.stack_name }}
  # Run terraform apply on push to develop for every changed stack
  apply-stack:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: get-changed-stacks
    strategy:
      matrix:
        stack_name: ${{ fromJson(needs.get-changed-stacks.outputs.changed_stack_array) }}
      max-parallel: 0
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v2.1.0
      - uses: hashicorp/setup-terraform@v1
      - name: Init stack
        run: make init_stack STACK=${{ matrix.stack_name }}
      - name: Apply stack
        run: make apply ENV=qa STACK=${{ matrix.stack_name }}





